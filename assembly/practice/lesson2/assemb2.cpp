/*
На прошлом занятии научились проводить операции с шестнадцатеричными числами. Умножение-деление необходимо для того, чтобы
разобраться. Предположим, что на С++ определены 3 переменные int a, b, c. И предположим, что нам необходимо, используя
так называемые ассемблеровские вставки, найти сумму этих 3 чисел. Причём значения этих 3 чисел вводятся с клавиатуры,
используя средства записи С++, так же как и с выводом на экран данных.
Ещё вариант записи: код_операции регистр, непостредственная_данная;
код_операции память, непосредственная_данная;
Для хранения чисел длиной 4 байта(фикс точка) используются следующие регистры: eax, ebx, ecx, edx. 

Замечание. 
Все команды ассемблера предполагают, что источник и приёмник имеют одну и ту же длину. Т е нельзя из области 
длиной 2 байта взять число и сложить с 4 байтовым регистром. 

С помощью вставок из ассемблера выводим на экран сумму этих значений.
Команды на языке С++ для ввода, после чего, используя ассемблеровскую вставку находим сумму этих 3 чисел. Чтобы сказать 
компилятору, что далее ассемблеровская вставка, в яызке С++: __asm
Для выполнения арифм операций используются операции регистр. mov
По этой команде из области памяти а будет взято содержимое и сделанно перемещение значения(копирование) в регистр ax, eax 
и его переворачивание(число будет находится в нормальном виде). В регистре ax будет находится число 5 в десятичном виде, в регистре 
ah число 00, al - 05. В результате в регистре eax будет находиться число из клавиатуры. 

Находим разность между первым и вторым числом, введённым с клавиатуры
*/
#include <iostream>

int main() {
    
    int a,b,c, sum;
    std::cout << "Введите 3 числа для получения их суммы: ";
    std::cin >> a >> b >> c;
    __asm {
        mov eax, a
        add eax, b
        add eax, c
        mov sum, eax
    }
    std::cout << "Сумма 3 чисел равна: " << sum << std::endl;
    asm(
        mov ebx, a
        sub ebx, b
        mov c, ebx
    )
    std::cout << "Разность первых 2 чисел равна: " << c << std::endl;
    /*
    Сейчас будет самое страшное. Придётся запоминать, что нужно проговаривать аж целых 3 если. Для нахождения произведения 
    2х чисел на языке assebmly используется команда mul, при этом в ней указывается только 1 операнд(источник). Если в
    команде mul указывается операнд длиной 1 байт, то команда mul тупо берёт содержимое регистра al и умножает на значение
    определённое операндом, длиной 1 байт. Если операнд, указанный в команде 2 байтовый, то по команде тупо берётся содержимое
    регистра ax, умножается на значение определённое операндом длиной 2 байта и результат помещается в пару регистров dx и ax. 
    Причём это содержимое рассматривается как одно число с фиксированной точкой. Если операнд, указанный в команде mul 
    4 байтовый, то в этом случае берётся содержимое eax, умножается на число определённое операндом, результат помещается в 
    пару регистров edx и eax.
    В 1 байтовом случае результат помещается тупо в ax. 

    Решаем слудующую подзадачу.
    Чтобы задействовать ecx, нужно записать:
    */
    
    /*
    Необходимо найти результат от деления первого введённого числа на второе введённое число. Как известно, результат
    от деления 2х чисел представляет собой часное и остаток. Например, если 5 поделить на 2, то часное равно 2, отстаток - 1
    Для выполнения действий по нахождению часного и остатка на языке assembly используется div(divide). При этом,
    в команде div, как и в команде mul, указывается только один операнд - делитель. 
    Если: 
    - Делитель 1-байтовый, то этот железный ящик(процессор) берёт содержимое регистра ax и делить на число, определённое
    операндом и результат выполнения операций помещает в пару регистров. Часное деления в регистр al, остаток деления в регистр 
    ah 
    и так далее по аналогии на помойке читаем, что будет если 2-х байтовый или 4-х байтовым. 
    И ещё пример, с клавиатуры вводится 4 числа. Необходимо найти значение выражения a^2 + 10*b - 3*c / 40*d
    */
    __asm {
        mov eax, b
        muv ecx, a
        mul ecx
        mov c, edx
    }
    std::cout << "Резултат умножения умножения первых 2х чисел: " << c << std::endl;
    system("pause");
}