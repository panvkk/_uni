/*
Тема занятия: организация т н ветвлений в языке записи алгоритмов ассемблер. 
В том случае, когда на языке ассемблер записано
некоторая последовательность действий или команд, состоящая из арифметических команд, то эти команды выполняются последовательно друг
за другом. Так структура выполнения называется структурой следования. Для того, чтобы менять порядок выполнения команд в машинном 
языке и соответственно в языке ассемблер существуют специальные средства, которые позволяют в том случае, когда, например а больше 0,
выполнить одну последовательность действий и в противном случае другую. Эти средства: регистр флажков(отображается результат выполнения
арифметических команд (как add, sub, cmp - средство организации ветвлений)). К средствам организации ветвлений относятсят также команды
скачков(jump), есть команда безусловного перехода(jmp), в качестве операнда ставится метка(jmp лесом). Также команды условного перехода
которые строятся следующим образом. Первой буквой является j, а дальше условие перехода(сокращения от отдельных англ слов) j g (jump greater)
и в этой команде тоже ставится метка(куда пойти, если условие выполнится) j g vse_v_sad. Может быть записана команда
переход, если меньше j l . По команде cmp от значения расположенного в 1 операнде вычетается значение, оперделённое вторым операндом и
результат никуда не помещается за исключением того, что вырабатывается признак результата, а именно этот признак результата выраба
тывается в регистре флажков. Он в свою очередь является 16-битным регистром, где каждый бит отвечается за ту или иную ситуацияю
НАпример, если в результате арифм операции sub a, b результат получается 0, то вырабатывается признак результата 0.(В бите z поя
вляется 1). В том случае, если по команде cmp a, b результат получается, что а > b, вырабатывается признак результата больше
(в соответствующий бит s помещается результат 1). И выработанный признак результата может быть использован командой условного перехода 
в частности, если по cmp будет выработан признак результата больше и если после записана j g, будет осуществлён переход на указанную
в ней метку.

Условие задачи. Ввести с клавиатуры числа а и б, и используя __asm, сделать так, чтобы в переменной а находилась меньшее число, 
а в переменной б большее из двух введённых. Необходимо поменять местами а и б в случае, что число большее. После чего вывести на 
экран полученные значения в а и б(а - меньшее, б - большее).

Метка записывается метка:. Командах перехода : не ставится.

Задача. Вводится 3 числа. а, б, с. Необходимо найти максимальное среди этих 3х чисел и вывести на экран.

Задача. Водятся а б с. Решаем уравнение ax + b = 0. В том случае, когда нет корней, в переменную индюк помещаем 0. Когда значений
много, -1.
*/

#include <iostream>

int main() {
	setlocale(LC_ALL, "Russian");
	int a, b, c, max;
	int induk, result, rest;
	std::cin >> a >> b;
	
	/*__asm {
		mov eax, a
		mov ebx, b 
		mov ecx, c
		cmp eax, b
		jl else1
		cmp eax, c
		jl else2
		mov max, eax
		jmp program_end
		else2:
		mov max, ecx
		jmp program_end
		else1:
		cmp ebx, ecx
		jl else3
		mov max, ebx
		jmp program_end
		else3:
		mov max, ecx
		jmp program_end
		end:
	}
	std::cout << max << std::endl;*/

	__asm {
		mov ebx, a
		mov eax, b
		cmp ebx, 0
		jne continue_program
		cmp eax, 0
		jne a_equal_zero
		mov induk, -1
		jmp program_end
	a_equal_zero:
		mov induk, 0
		jmp program_end
	continue_program:
		mov edx, 0
		div ebx
		neg eax
		mov rest, edx
		mov result, eax
		jmp program_end
	program_end:

	}
	if (induk != 0 && induk != -1)
		std::cout << "Solution of equation ax + b = 0: " << result << ", rest: " << rest << std::endl;
	else
		std::cout << induk << std::endl;
	return 0;
}