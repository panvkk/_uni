/*
Замечание. По опыту 6 группы диктование команд ассемблер для студентов первого курса бессмысленно. Тем не менее, продиктуем ещё
один раз про команду loop.
Команда div: указывается 1 операнд. Если в команде записан операнд длиной 1 байт, то содержимое ax делится на значение определённое
операндом и результат помещается в пару регистров: частное - al, остаток - ah. Если операнд 2 байтовый, то железная машина осуществляет
деление числа из пары регистров dx и ax на операнд и результат: частное - ax, остаток - dx. И если операнд 4 байтовый, то
железяка тупо берёт содержимое edx и eax и рассматривает содержимое как число из 8 байтов и делит на операнд. Результат: частное 
помещается в eax, остаток в edx. При этом, div рассматривает числа как беззнаковые.
Команда loop: указывается метка, то есть, имя, которое может быть записано на ЯЗА перед какой либо командой, причём после неё
указывается двоеточие, например loop povt: . Метки должны быть уникальны и не совпадать с общими именами. Выполняются действия:
1) от содержимого cx вычитается 1
2) если cx(ecx) значение 0, то выполняется команда после команды loop. Если содержимое оказывается не равно 0, то осуществляется 
скачок на команду, которая помечена указанной в loop меткой.
mov ecx, 0
povt:
loop povt
2^32 - 1 раз

Решить задачу: вводится целое положительное число n, необходимо найти используя __asm, сумму первых n чисел, сначала используя формулу,
а после чего, используя команду loop. 

Для заданного числа n получить факториал. Определить, при каком n
неверный результат.
Задача. Это же число n, Найти сумму цифр в этом числе.
При нахождении произведения и деления используется один и тот же регистр eax. В этой связи есть задача:
после деления сохранить частное из eax. 

mov ecx, eax

Задача в ДЗ: 
1) Необходимо найти информацию в одном из файлов о том, каким образом связываются процедуры языка С с процедурами языка assembly
Необходимо проделать всё, что написано в файле.
2) Вводится число n, необходимо вывести это число в перевёрнутом виде.
*/

#include <iostream>

int main() {
	setlocale(LC_ALL, "Russian");
	unsigned int n, rest = 0, result = 1, ten = 10;
	std::cin >> n;		//	(n+1)/2 * n
	__asm {
		/*mov eax, n
		mov ebx, 1
		add eax, ebx
		mov ecx, n
		mul ecx 
		mov ebx, 2
		div ebx 
		mov result, eax
		mov rest, edx*/

		/*mov ecx, n
		mov eax, 1
		povt:
		mul ecx
		loop povt
		mov result, eax*/

			// Неверный результат: 2^31 - 1 < n!

		/*mov eax, n
	povt:
		cmp eax, 0
		je program_end
		mov edx, 0
		div ten 
		add result, edx 
		jmp povt
	program_end:*/

		mov eax, n
		mov ecx, 2
		povt:
		mov edx, 0
		div ten
		mov ecx, eax
		mov eax, result
		mul edx
		mov result, eax
		mov eax, ecx
		loop povt
	
	}


	std::cout << "Result: " << result << ", rest: " << rest << std::endl;
}